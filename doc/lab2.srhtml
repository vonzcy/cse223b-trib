<%= pagetop("CSE 223B Labs") %>

<style type="text/css">
    div.labbody {
        max-width: 900px;
    }

    ul.labs {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 120%;
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    ul.labs li {
        display: inline-block;
        margin-right: 20px;
    }

    code, tt {
      margin: 0 2px;
      padding: 0 5px;
      white-space: nowrap;
      border: 1px solid #eaeaea;
      background-color: #f8f8f8;
      border-radius: 3px;
    }
     
    pre code {
      margin: 0;
      padding: 0;
      white-space: pre;
      border: none;
      background: transparent;
    }
     
    .highlight pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }
     
    pre {
      background-color: #f8f8f8;
      border: 1px solid #cccccc;
      font-size: 13px;
      line-height: 19px;
      overflow: auto;
      padding: 6px 10px;
      border-radius: 3px;
    }
     
    pre code, pre tt {
      background-color: transparent;
      border: none;
    }
</style>
<link rel="stylesheet" href="gfm.css">


<ul class="labs">
    <li><a href="labs.html">Lab Home</a></li>
    <li><a href="lab1.html">Lab 1</a></li>
    <li><a href="lab2.html">Lab 2</a></li>
    <li><a href="lab3.html">Lab 3</a></li>
</ul>

<div class="labbody">
<h2 id="lab-2">Lab 2</h2>
<p>Welcome to Lab 2. The goal of this lab is to use the RPC service we built in Lab 1 as the basis to impelement a scalable Tribbler infrastructure, split into separate front-ends and back-ends.</p>
<p>In particular, you will do this by first wrapping the key-value server into a distributed key-value service called <em>bin storage</em>. Your implementation should fit the <code>trib.BinStorage</code> interface. Then, on top of this storage layer, you will implement a stateless Tribbler front-end that fits the <code>trib.Server</code> interface.</p>
<h2 id="get-your-repo-up-to-date">Get Your Repo Up-to-date</h2>
<p>First we need to update the <code>trib</code> repo to pull down any recent changes that we (the instructors) may have made:</p>
<pre><code>$ cd ~/gopath/src/trib
$ git pull origin master</code></pre>
<p>This should be painless, but if you changed anything in the <code>trib</code> repo, you'll need to merge the changes by hand. As a reminder, changes to the <code>trib</code> repo aren't necessary, and you shouldn't be doing them.</p>
<p>You'll also want to merge in any changes from the <code>triblab</code> repo. Hopefully, this will also be painless, as we don't (as of this writing) expect any changes.</p>
<pre><code>$ cd ~/gopath/src/triblab
$ git pull origin master</code></pre>
<p>If you have trouble on merging the changes (on any of the repos), and don't know how to solve the conflicts, please ask the TA for help.</p>
<h2 id="system-architecture">System Architecture</h2>
<p>The overall system architecture looks like this:</p>
<p><img src="./arch.png" alt="System Arch" /></p>
<p>Our system is split into two parts. The upper part is the Tribbler service. The lower part is a general purpose distributed key-value store called &quot;Bin Storage&quot;. Users' web browsers make AJAX calls to the Tribbler front-ends. These front-end servers then convert those requests into one or more calls to the bin storage client interface. This interface then uses RPC to talk to one or more of the simple key-value stores that we built in Lab 1.</p>
<p>Separately, there is also a <code>keeper</code> running in the background that maintains the bin storage in a coherent state. Both the bin storage clients and the keeper use the same RPC interface (the one developed in Lab 1) to communicate with the back-ends. The interface semantics defined in <code>trib.Storage</code> should be sufficient to perform all the bin storage tasks without any changes.</p>
<h2 id="bin-storage">Bin Storage</h2>
<p><strong>Bin Storage</strong> is a distributed key-value system that combines a bunch of <code>trib.Storage</code> back-ends and presents itself as a unified and scalable storage service over the network. Bin storage service is provided via the <code>trib.BinStorage</code> interface.</p>
<p>Conceptually, bin storage provides an infinite set of separate <code>trib.Storage</code> instances called <em>bins</em>. Each bin has a different name, and a caller can fetch a bin via the <code>BinStorage.Bin()</code> function. This is the only function in the <code>trib.BinStorage</code> interface. Initially, all bins are empty.</p>
<p>The bin storage service provides this service on top of a finite set of back-end key-value stores (Lab 1). Each bin (a virtual KV store) will be mapped to one of the key-value back-ends. Thus, this is a many-to-one mapping, with multiple bins potentially sharing a single back-end. You will do this by splitting the key space with prefixes (or suffixes) that encode the bin names. As an example, the figure below shows a bin storage hashing 6 bins into 3 back-ends, where each bin is indicated with a different prefix. When a caller calls <code>Get(&quot;some-key&quot;)</code> on the bin <code>&quot;alice&quot;</code>, for example, the bin storage client translates this into a <code>Get(&quot;alice::some-key&quot;)</code> RPC call on back-end 0.</p>
<p><img src="./bins.png" alt="Bin Storage" /></p>
<p>In addition to key-value stores in bins, the bin storage also maintains a coarsely synchronized logical clock across <em>all</em> the bins, so items in different bins can be reasonably ordered relative to each other. Since the back-ends are &quot;dumb&quot;, and do not talk to each other, this clock synchronization is a job for the background keeper process. Note that the clocks are NOT real-time synchronized (which would be too expensive for a distributed system), but only coarsely synchronized. In particular, if a <code>Clock()</code> call is issued at least 3 seconds after another <code>Clock()</code> call, no matter which bins they are issued in, bin storage always guarantees that the later call always returns a clock value no smaller than the earlier one's. Note that a bin storage with one single back-end will trivially satisfy this requirement. The keeper's job comes in when there are multiple back-ends to keep in sync.</p>
<p>As mentioned, we already implemented the back-end for Lab 1, and the key-value store API will not change. Both the bin storage client and the keeper will communicate with the &quot;dumb&quot; back-ends via the RPC calls we implemented, and cooperatively they will present a coherent bin storage interface to upper layer applications. Since we'll be reusing the work from Lab 1, make sure you've implemented the back-end correctly!</p>
<h2 id="tribbler">Tribbler</h2>
<p>Before we look into how the Tribbler service works, let's first define what a tribble is.</p>
<p>A <code>Tribble</code> is a Go structure that has 4 fields:</p>
<pre><code>type Trib struct {
    User    string    // who posted this trib
    Message string    // the content of the trib
    Time    time.Time // the physical timestamp
    Clock   uint64    // the logical clock
}</code></pre>
<p><code>Time</code> is a real-world timestamp, read from the machine's time on the front-end immediately after <code>Post()</code> is called on a <code>trib.Server</code>. In order to sort tribbles in a globally consistent and <em>reasonable</em> order, however, we cannot sort the tribbles only by this timestamp, as different front-ends may have different clocks. For sorting, the Tribbler service uses a distributed logical <code>Clock</code> in <code>uint64</code>.</p>
<p>When sorting many tribbles into a single timeline, you should sort by the fields following this priority:</p>
<ol>
<li><code>Clock</code> The logical timestamp.</li>
<li><code>Time</code> The physical timestamp.</li>
<li><code>User</code> The user id.</li>
<li><code>Message</code> The message content.</li>
</ol>
<p>We call this the <em>Tribble Order</em>.</p>
<h2 id="tribbler-service-interface">Tribbler Service Interface</h2>
<p>The Tribbler service logic is defined by the <code>trib.Server</code> interface (in <code>trib/trib.go</code>). This is how the web user interface interacts with a Tribbler server.</p>
<hr />
<pre><code>SignUp(user string) error</code></pre>
<p>Creates a new user. After a user is created, it will never disappear in the system.</p>
<p>Returns error when the username is invalid or the user already exists. If there are concurrent sign-ups, both sign-ups may succeed.</p>
<p>Valid usernames must be no longer than <code>trib.MaxUsernameLen=15</code> characters but not empty, must start with a lower-case letter, and can only contain lower-case letters or numbers. There is a helper function called <code>trib.IsValidUsername(string)</code> which you can use to check if a username is valid.</p>
<hr />
<pre><code>ListUsers() ([]string, error)</code></pre>
<p>Lists at least <code>trib.MinListUser=20</code> different registered users. When there are less than 20 users that have ever signed up, list all of them. The returned usernames should be sorted in alphabetical order.</p>
<p>This is just for showing some users on the front page; this is not for listing all the users that have ever signed up, as that would be too expensive in a large system.</p>
<hr />
<pre><code>Post(who, post string, clock uint64) error</code></pre>
<p>Posts a tribble. <code>clock</code> is the maximum clock value this user client has ever seen (from reading tribbles via <code>Home()</code> or <code>Tribs()</code>). It returns error when the user does not exist or the post is too long (longer than <code>trib.MaxTribLen=140</code>).</p>
<hr />
<pre><code>Tribs(user string) ([]*Trib, error)</code></pre>
<p>Lists the recent <code>trib.MaxTribFetch=100</code> tribbles that a user posted. Tribbles needs to be sorted in the Tribble Order, and also in the same order that the user posted the tribbles.</p>
<hr />
<pre><code>Follow(who, whom string) error
Unfollow(who, whom string) error
IsFollowing(who, whom string) (bool, error)
Following(who string) ([]string, error)</code></pre>
<p>These are functions to follow/unfollow, check following and listing all following users of a user. Users can never follow/unfollow themselves. When calling with <code>who</code> equal to <code>whom</code>, the functions must return an error. When the user does not exist, the functions return an error. If a user performs a <code>Follow()</code> on another user over multiple clients concurrently, only one <code>Follow()</code> should succeed with no errors.</p>
<p>A user can follow at most <code>trib.MaxFollowing=2000</code> users. When a user tries to follow more than <code>trib.MaxFollowing=2000</code> users, <code>Follow()</code> should return an error.</p>
<hr />
<pre><code>Home(user string) ([]*Trib, error)</code></pre>
<p>List the recent <code>trib.MaxTribFetch=100</code> tribbles that are posted on the user's timeline in Tribble Order. In addition, the ordering should always satisfy the following conditions:</p>
<ol>
<li>If tribble A is posted after tribble B, and they are both posted by the same user, A always shows after B.</li>
<li>If tribble A is posted at least 10 seconds after tribble B, even if they are posted by different users, A always shows after B.</li>
<li>If tribble A is posted after a user client sees tribble B, A always shows after B.</li>
</ol>
<p>A is <em>posted after</em> B means B calls <code>Post()</code> after A's <code>Post()</code> has returned.</p>
<p>The function returns error when the user does not exist.</p>
<hr />
<p>In addition to normal errors, these calls might also return IO errors if the implementation is unable to communicate with a remote service. Returning a nil error means that the call is successfully executed; returning a non-nil error means that the call may or may not have successfully executed (depending on when/where the error occurred).</p>
<p>Note that the <code>trib/ref</code> package contains a reference implementation for <code>trib.Server</code> (which you played with briefly in the lab setup).</p>
<h2 id="entry-functions">Entry Functions</h2>
<p>Your job for Lab 2 is two-fold.</p>
<ol>
<li>Implement the bin storage service by implementing the bin storage client logic (the <code>NewBinClient()</code> function) and the keeper (the <code>ServeKeeper()</code> function).</li>
<li>Reimplement the Tribbler service by translating all the Tribbler service calls into bin storage service calls (the <code>NewFront()</code> function).</li>
</ol>
<p>You can find these entry functions in <code>lab2.go</code> file under <code>triblab</code> repo:</p>
<pre><code>func NewBinClient(backs []string) trib.BinStorage</code></pre>
<p>This function is similar to <code>NewClient()</code> in <code>lab1.go</code> but instead returns a <code>trib.BinStorage</code> interface. <code>trib.BinStorage</code> has only one function called <code>Bin()</code>, which takes a bin name and returns a <code>trib.Storage</code>. A bin storage provides another layer of mapping, where the caller will first gets a key-value store (the bin) with a name and then performs calls on the returned store. Different bin names should logically return completely separate key-value storage spaces, even though multiple bins might share a single physical back-end store.</p>
<p>For your convenience, we have provided a small package called <code>trib/colon</code> which you can use for escaping all the colons in a string. The escaping rule is simple, all <code>'|'</code> characters are escaped into <code>&quot;||&quot;</code>, and all <code>':'</code> characters are escaped into <code>&quot;|:&quot;</code>. Please use this package wisely.</p>
<hr />
<pre><code>func ServeKeeper(b *trib.KeeperConfig) error</code></pre>
<p>This function is a blocking function, similar to <code>ServeBack()</code>. It will spawn a keeper instance that maintains the back-ends in a bin store in consistent state. For Lab 2, there will be only one keeper and the keeper won't have a lot to do. In Lab 3 we'll be adding fault tolerance. Then, there will be multiple keepers, and they will handle maintaining consistency as back-ends die and rejoin.</p>
<p>(Note: A blocking function in this context means that it will never return under normal operation. If it does return, it will be because it experienced an error. If you implemented <code>ServeBack()</code> in Lab 1 with something like <code>go http.Serve(...)</code>, you should go back and fix it before continuing.</p>
<p>The <code>trib.KeeperConfig</code> structure contains all the information needed on back-ends, and also some additional information about other keepers which you can ignore until Lab 3:</p>
<ul>
<li><code>Backs []string</code>: This is the complete list of addresses to back-ends that the keeper needs to maintain.</li>
<li><code>Keepers []string</code>: This is the list of addresses for keepers. Lab 2 will have only one keeper; Lab 3 will always have least three keepers, but for now you can ignore this field.</li>
<li><code>This int</code>: The index of this keeper (in the <code>Keepers</code> list). For Lab 2, this will always be zero.</li>
<li><code>Id int64</code>: A non-zero incarnation identifier for this keeper, indicating when this keeper was created relative to other keepers. For Lab 2, you may ignore this field.</li>
<li><code>Ready</code>: A ready signal channel. It works similarly to the <code>Ready</code> channel in <code>trib.BackConfig</code> from Lab 1. When a keeper sends <code>true</code> on this channel, the distributed bin storage should be ready to serve. Therefore, if you need to initialize the physical back-ends in some way, make sure you do it before you send a signal over <code>Ready</code>. Don't forget to send <code>false</code> to <code>Ready</code> if the initialization fails.</li>
</ul>
<p>You can add whatever functionality you want to the keeper, so long as it is limited to maintaining the integrity and consistency of the bin storage, and the setup is limited to the three <code>NewBinClient()</code>, <code>ServeBack()</code> and <code>ServeKeeper()</code> calls. In particular, since the keeper is logically part of the bin storage service, it may understand how a bin storage client translates keys. It should NOT rely on anything specific to Tribbler.</p>
<p>Although an address for each keeper is given in the <code>Keepers</code> field, your keeper does not necessarily need to listen on the address given. The keeper address serves more like a unique keeper identifier, and identifies that a keeper should be running on a given machine.</p>
<hr />
<pre><code>func NewFront(s trib.BinStorage) trib.Server</code></pre>
<p>This function takes a bin storage structure, and returns an implementation of <code>trib.Server</code>. The returned instance then will serve as a service front-end that takes Tribbler service requests, and translates them into one or more calls to the back-end key-value bin storage. This front-end should be stateless, concurrency safe, and ready to be killed at any time. This means that at any time during its execution on any call, the back-end key-value store always needs to stay in a consistent state. Also, note that one front-end might be taking multiple concurrent requests from the Web, and there might be multiple front-ends talking to the same back-end, so make sure your system handles all the concurrency issues correctly.</p>
<p>Note that your tribbler service should not rely on any special features that you added to your bin storage client. In particular, we should be able to swap out your <code>trib.BinStorage</code> for our own, and your Tribbler front-end should be perfectly happy (and none the wiser). In particular, this means that you cannot rely on the bin storage keeper to perform Tribbler related tasks. A front-ends may spawn additional background go routines if additional work is required by your implementation.</p>
<h2 id="putting-the-pieces-together">Putting the pieces together</h2>
<p>Your first step should be to write the bin storage service. Since we might have multiple parts running at the same time, potentially on different machines, we need a configuration file that specifies the serving addresses of the back-ends and the keeper for the distributed bin storage. By default, the system expects a file named <code>bins.rc</code>.</p>
<p><code>bins.rc</code> is saved in JSON format, marshalling a <code>RC</code> structure type (defined in <code>trib/rc.go</code> file). We have a utility program called <code>bins-mkrc</code> that can generate a <code>bins.rc</code> file automatically.</p>
<p>Find a directory to use as your working directory (like <code>triblab</code>), then run:</p>
<pre><code>$ bins-mkrc -local -nback=3</code></pre>
<p>This will generate a file called <code>bins.rc</code> under the current directory, and also print the file content to stdout. <code>-local</code> means that all addresses will be on <code>localhost</code>. <code>-nback=3</code> means there will be in total three back-end servers. If you remove <code>-local</code>, then it will generate back-end servers starting from <code>169.228.66.143</code> and going up to <code>169.228.66.152</code>, which are the IP address of our test machines. For <code>bins-mkrc</code>, there can be at most 10 back-ends and 10 keepers (since we only have 10 lab machines). However, you are free to create your own <code>bins.rc</code> file that has more back-ends and keepers. For now, we'll use 3 back-ends and 1 keeper (the default value for <code>-nkeep</code>).</p>
<p>With this configuration file generated, we can now launch the back-ends:</p>
<pre><code>$ bins-back</code></pre>
<p>This will read and parse the <code>bins.rc</code> file, and spawn all the back-ends that have serving address on this host. Since all the back-ends we generate here are on <code>localhost</code>, all three will be spawned with this command, each in its own goroutine. You should see three log lines showing that three back-ends started, but listening on different ports. Aside from reading its task from the configuration file, <code>bins-back</code> isn't much different from the <code>kv-serve</code> program. You can also specify the back-ends you'd like to start directly by providing command-line flags. For example, you can run the following to start only the first two back-ends:</p>
<pre><code>$ bins-back 0 1</code></pre>
<p>By the way, by spawning multiple servers in a single process, this program does a good job of demonstrating why we didn't want to use <code>rpc.DefaultServer</code> in Lab 1.</p>
<p>After the back-ends are ready, we can now start the keeper.</p>
<pre><code>$ bins-keeper</code></pre>
<p>This process should print a message that shows that the bin storage is ready to serve.</p>
<p>To play with this distributed bin storage, we can use <code>bins-client</code>:</p>
<pre><code>$ bins-client
(working on bin &quot;&quot;)
&gt; bin a
(working on bin &quot;a&quot;)
&gt; get a

&gt; set a b
true
&gt; get a
b
&gt; bin t
(working on bin &quot;t&quot;)
&gt; get a b

&gt; bin a
(working on bin &quot;a&quot;)
&gt; get a b
b
...</code></pre>
<p>This program reads the back-end addresses from <code>bins.rc</code> and can switch between different bins with the <code>bin</code> command. Otherwise, it operates similarly to <code>kv-client</code> from the previous lab. The default bin is the bin named &quot;&quot;.</p>
<p>Once our bin storage is up and running, we can launch our Tribbler front-end:</p>
<pre><code>$ trib-front -init -addr=:rand -lab</code></pre>
<p>You have used this utility before. The only new thing here is the <code>-lab</code> flag, which tells it to read the <code>bins.rc</code> file and use our lab implementation. This will start a stateless front-end (which you implemented in this lab) that connects to the back-ends specified in <code>bins.rc</code>.</p>
<p>Again <code>-init</code> will populate the service with some sample data.</p>
<p>Now you can open your browser, connect to the front-end machine and play with your own implementation.</p>
<p>If you want to use some other configuration file, use the <code>-rc</code> flag. It is supported in all the utilities above.</p>
<p>Again, once you've completed this lab, your Tribbler implementation should be able to support multiple front-ends and multiple back-ends in a nice, scalable (but not fault-tolerant) way.</p>
<h2 id="assumptions">Assumptions</h2>
<p>For this lab, there are a number of simplifying assumptions we'll be making. Some of these assumptions are reasonable. Many of the rest we'll remove in Lab 3:</p>
<ul>
<li>No network communication errors will occur.</li>
<li>Once a back-end or a keeper starts, it will remain online forever.</li>
<li>The system will always start in the following order: the back-ends, the keeper, then all the front-ends.</li>
<li>The <code>trib.Storage</code> used in the back-end will return every <code>Clock()</code> call in less than 1 second.</li>
<li>In the <code>trib.Storage</code> used in the back-end, all IO on a single process are serialized (and hence the interface provides sequential consistency). Each visit to a key (e.g. checking if a key exist, locating its corresponding value, iterating over a number of keys) will take less than 1 millisecond. Reads and writes of 1MB of data or less as a value (in a list or a string) will take less than 1 millisecond. Note that <code>Keys()</code> and <code>ListKeys()</code> might take a longer time to complete because it needs to scan over all the keys.</li>
<li>All the front-ends, the back-ends and the keeper will be running on the lab machines.</li>
<li>Although the Tribbler front-ends can be killed at any time, the killing won't happen very often (less than once per second).</li>
</ul>
<p>Again, some of these assumptions won't stay true for Lab 3, so try to avoid relying on these assumptions if possible.</p>
<h2 id="requirements">Requirements</h2>
<p>In addition to the requirements specified by the interfaces, your implementation should also satisfy the following requirements:</p>
<ul>
<li>When the Tribbler service function call has valid arguments, the function call should not return an error.</li>
<li>The front-end should be stateless and hence safe to be kill at anytime.</li>
<li>The back-ends should be scalable, and the front-end should use the back-ends in a scalable way. This means that when the back-end is the throughput bottleneck, adding more back-ends should (with high probability) mitigate the bottleneck and lead to better overall system performance.</li>
<li>When running on the lab machines with more than 5 back-ends (assuming all the back-ends satisfy the performance assumptions), every Tribbler service call should return within three seconds. Ideally much less than this.</li>
<li>Each back-end should maintain the same key-value pair semantics as in Lab 1.</li>
</ul>
<p>As a result, all test cases that pass for Lab 1's storage implementation should also pass on your bin storage implementation for Lab 2.</p>
<h2 id="building-hints">Building Hints</h2>
<p>While you are free to build the system any way that meets the requirements, here are some suggestions:</p>
<ul>
<li>For each service call in the front-end, if it updates anything in the back-end storage, use only one write-RPC call to commit your change. This will make sure that the call will either succeed or fail, and not end up in some weird intermediate state. You might issue more write calls afterwards, but those should be only soft hints, meaning that if subsequent writes don't succeed, the storage system is not left in an inconsistent state.</li>
<li>Hash the tribbles and other information into all the back-ends based on username. You may find the package <code>hash/fnv</code> helpful for hashing.</li>
<li>Synchronize the logical clocks among all the back-ends every second. (This will also serve as a heart-beat signal, which will be useful for implementing Lab 3.) However, you should not try to synchronize the clocks for every post, because that will be not scalable.</li>
<li>Do some garbage collection when one user has too many tribbles saved in the storage. Recall that no one will ever see more than the most recent 100 tribbles by any other user.</li>
<li>Keep multiple caches for the ListUsers() call when the users are many. Note that when the user count is more than 20, you don't need to track new registered users anymore.</li>
<li>Keep a log for the users that a user follows, where each log entry is an action of <code>Follow()</code> or <code>Unfollow()</code>.</li>
</ul>
<h2 id="possible-mistakes">Possible Mistakes</h2>
<p>Here are some possible mistakes that a lazy and quick but incorrect implementation might do:</p>
<ul>
<li><strong>Read-modify-write</strong>: As an example, a tribbler might read a counter from the key-value store, increment it by one, and then write it back (at the same key). This will introduce a race condition among the front-ends.</li>
<li><strong>Not handling errors</strong>: A tribbler call might require several RPC calls to the back-end. It is important to properly handle <em>any</em> error returned by these calls. It is okay to tell the user that an error occurred. However, it's not a good plan to leave your back-end inconsistent.</li>
<li><strong>Sorting by the timestamps first</strong>: Again, the Tribble Order dictates that the logic clock is the first field to consider on sorting.</li>
<li><strong>Misusing the clock argument in Post()</strong>: For example, you might directly use that argument as the new post's clock field. Intuitively, the clock argument tells the <em>latest</em> tribble a user has seen (which might be 0 if the user hasn't seen any tribbles yet), hence the new posted tribble better have a clock value that is at least larger than the argument. You might need to do more than increment it by one though.</li>
<li><strong>Generating the clock from the timestamp</strong>: While 64-bit clock can cover a very wide time range even in the unit of nanoseconds, you should keep in mind that the front-ends are running on different servers with arbitrary physical time differences. It is not wise to generate the logical <em>clock</em> from the physical <em>time</em>.</li>
<li><strong>Not handling old tribbles</strong>: Note that only the most recent 100 tribbles of a user matter. Not handling old tribbles might lead to worse and worse performance over time and eventually break your performance promises.</li>
</ul>
<h2 id="readme.md"><code>Readme.md</code></h2>
<p>Please include a <code>Readme.md</code> file. <code>Readme.md</code> should be a text file (ideally in <a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a> format) that describes how your system works at a high level. You should be able to describe how your Bin Storage works in a few sentences, and Tribbler in a few more.</p>
<p>The purpose of this document is two-fold:</p>
<ul>
<li>If your <code>Readme</code> is well written, it'll make my job of grading <em>considerably</em> easier.</li>
<li>An overview document forces you to think about your overall strategy, and forces you to try to find an elegant solution (that you can describe succinctly).</li>
</ul>
<p>This <code>Readme</code> <em>will</em> count towards your grade, but <em>will not</em> be a significant number of points overall. It's worth spending some time on, but NOT at the expensive of good, working code. You'll primarily be graded on clarity and coverage of the big ideas of your solutions.</p>
<h2 id="turning-in-your-code">Turning In Your Code</h2>
<p>First, make sure that you have committed every piece of your code into the repository <code>triblab</code>. Then just type <code>make turnin-lab2</code> under the root of the repository. It will generate a <code>turnin.zip</code> file that contains everything in your git repository, and then it will copy that file to a place where only the lab instructors can read it.</p>
<h2 id="happy-lab-2">Happy Lab 2!</h2>
</div>
<%= pagebottom() %>
